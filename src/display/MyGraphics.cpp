#include "MyGraphics.h"
#include <pgmspace.h>
#include <vector>

#define ZERO_TO_NINE u'0', u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9'

#define FUNCDEF_GETGLYPH(w, h)                                                   \
  template <>                                                                    \
  bool MyGraphics::tryGetGlyph<w, h>(char16_t c, uint8_t *retval) const {        \
    return tryGetGlyphPtr<h>(glyph##w##x##h, glyph##w##x##h##_chars, c, retval); \
  }

/**
 * @brief 文字グリフを取り出す関数
 * 
 * @tparam GlyphSize 1文字あたりの要素数
 * @param array 取り出し対象の配列
 * @param glyphes 
 * @param c 取り出したい文字
 * @param[out] retval 受け渡し用配列の先頭アドレス
 * @retval true 文字が見つかった
 * @retval false 文字が見つからない
 */
template <size_t GlyphSize>
static bool tryGetGlyphPtr(const uint8_t *array, const std::vector<char16_t> &glyphes, char16_t c, uint8_t *retval) {

  for (size_t i = 0; i < glyphes.size(); i++) {
    if (glyphes.at(i) == c) {
      if (retval)
        memcpy_P(retval, array + (i * GlyphSize), GlyphSize);
      return true;
    }
  }
  return false;
}

/// 3x5 サイズの文字グリフ
static const uint8_t glyph3x5[] PROGMEM = {
    0b111, // 0
    0b101,
    0b101,
    0b101,
    0b111,

    0b010, // 1
    0b010,
    0b010,
    0b010,
    0b010,

    0b111, // 2
    0b001,
    0b111,
    0b100,
    0b111,

    0b111, // 3
    0b001,
    0b111,
    0b001,
    0b111,

    0b101, // 4
    0b101,
    0b111,
    0b001,
    0b001,

    0b111, // 5
    0b100,
    0b111,
    0b001,
    0b111,

    0b100, // 6
    0b100,
    0b111,
    0b101,
    0b111,

    0b111, // 7
    0b001,
    0b001,
    0b001,
    0b001,

    0b111, // 8
    0b101,
    0b111,
    0b101,
    0b111,

    0b111, // 9
    0b101,
    0b111,
    0b001,
    0b001,

    0b000, // - (minus)
    0b000,
    0b111,
    0b000,
    0b000,

    0b100, // h
    0b100,
    0b111,
    0b101,
    0b101,

    0b111, // P
    0b101,
    0b111,
    0b100,
    0b100,

    0b111, // a
    0b001,
    0b011,
    0b101,
    0b011,

    0b111, // R
    0b101,
    0b111,
    0b110,
    0b001,

    0b101, // H
    0b101,
    0b111,
    0b101,
    0b101,

    0b010, // i
    0b000,
    0b010,
    0b010,
    0b010,

    0b100, // L
    0b100,
    0b100,
    0b100,
    0b111,

    0b000, // o
    0b000,
    0b111,
    0b101,
    0b111,
};

static const std::vector<char16_t> glyph3x5_chars = {ZERO_TO_NINE, u'-', u'h', u'P', u'a', u'R', u'H', u'i', u'L', u'o'};

FUNCDEF_GETGLYPH(3, 5);

/// 4x5 サイズの文字グリフ
static const uint8_t glyph4x5[] PROGMEM = {
    0b1111, // 0
    0b1001,
    0b1001,
    0b1001,
    0b1111,

    0b0010, // 1
    0b0010,
    0b0010,
    0b0010,
    0b0010,

    0b1111, // 2
    0b0001,
    0b1111,
    0b1000,
    0b1111,

    0b1111, // 3
    0b0001,
    0b1111,
    0b0001,
    0b1111,

    0b1010, // 4
    0b1010,
    0b1111,
    0b0010,
    0b0010,

    0b1111, // 5
    0b1000,
    0b1111,
    0b0001,
    0b1111,

    0b1111, // 6
    0b1000,
    0b1111,
    0b1001,
    0b1111,

    0b1111, // 7
    0b0001,
    0b0001,
    0b0001,
    0b0001,

    0b1111, // 8
    0b1001,
    0b1111,
    0b1001,
    0b1111,

    0b1111, // 9
    0b1001,
    0b1111,
    0b0001,
    0b1111,

    0b0000, // ℃
    0b1000,
    0b0111,
    0b0100,
    0b0111,

};

static const std::vector<char16_t> glyph4x5_chars = {ZERO_TO_NINE, u'℃'};

FUNCDEF_GETGLYPH(4, 5);

/// 5x5 サイズの文字グリフ
static const uint8_t glyph5x5[] PROGMEM = {
    0b00001, // / (Slash)
    0b00010,
    0b00100,
    0b01000,
    0b10000,

    0b11001, // %
    0b11010,
    0b00100,
    0b01011,
    0b10011,
};

static const std::vector<char16_t> glyph5x5_chars = {u'/', u'%'};

FUNCDEF_GETGLYPH(5, 5);

/// 3x7 サイズの文字グリフ
static const uint8_t glyph3x7[] PROGMEM = {
    0b111, // 0
    0b101,
    0b101,
    0b101,
    0b101,
    0b101,
    0b111,

    0b010, // 1
    0b010,
    0b010,
    0b010,
    0b010,
    0b010,
    0b010,

    0b111, // 2
    0b001,
    0b001,
    0b111,
    0b100,
    0b100,
    0b111,

    0b111, // 3
    0b001,
    0b001,
    0b111,
    0b001,
    0b001,
    0b111,

    0b101, // 4
    0b101,
    0b101,
    0b101,
    0b111,
    0b001,
    0b001,

    0b111, // 5
    0b100,
    0b100,
    0b111,
    0b001,
    0b001,
    0b111,

    0b100, // 6
    0b100,
    0b100,
    0b111,
    0b101,
    0b101,
    0b111,

    0b111, // 7
    0b001,
    0b001,
    0b001,
    0b001,
    0b001,
    0b001,

    0b111, // 8
    0b101,
    0b101,
    0b111,
    0b101,
    0b101,
    0b111,

    0b111, // 9
    0b101,
    0b101,
    0b111,
    0b001,
    0b001,
    0b001,

    0b000, // -
    0b000,
    0b000,
    0b111,
    0b000,
    0b000,
    0b000,
};

static const std::vector<char16_t> glyph3x7_chars = {ZERO_TO_NINE, u'-'};

FUNCDEF_GETGLYPH(3, 7);

/// 7x7 サイズの文字グリフ
static const uint8_t glyph7x7[] PROGMEM = {
    0b1111111, // 日
    0b1000001,
    0b1000001,
    0b1111111,
    0b1000001,
    0b1000001,
    0b1111111,

    0b0111111, // 月
    0b0100001,
    0b0111111,
    0b0100001,
    0b0111111,
    0b0100001,
    0b1000011,

    0b0001000, // 火
    0b1001001,
    0b0101010,
    0b0001000,
    0b0010100,
    0b0100010,
    0b1000001,

    0b0001000, // 水
    0b0001001,
    0b1101010,
    0b0101100,
    0b0101010,
    0b1001001,
    0b0001000,

    0b0001000, // 木
    0b1111111,
    0b0001000,
    0b0011100,
    0b0101010,
    0b1001001,
    0b0001000,

    0b0011100, // 金
    0b0100010,
    0b1011101,
    0b0001000,
    0b1011101,
    0b0101010,
    0b1111111,

    0b0001000, // 土
    0b0001000,
    0b0111110,
    0b0001000,
    0b0001000,
    0b0001000,
    0b1111111,
};

static const std::vector<char16_t> glyph7x7_chars = {u'日', u'月', u'火', u'水', u'木', u'金', u'土'};

FUNCDEF_GETGLYPH(7, 7);

/// 5x8 サイズの文字グリフ
static const uint8_t glyph5x8[] PROGMEM = {
    0b11111, // 0
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b11111,

    0b00100, // 1
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,

    0b11111, // 2
    0b00001,
    0b00001,
    0b00001,
    0b11111,
    0b10000,
    0b10000,
    0b11111,

    0b11111, // 3
    0b00001,
    0b00000,
    0b01111,
    0b00001,
    0b00001,
    0b00001,
    0b11111,

    0b00010, // 4
    0b10010,
    0b10010,
    0b10010,
    0b10010,
    0b11111,
    0b00010,
    0b00010,

    0b11111, // 5
    0b10000,
    0b10000,
    0b11111,
    0b00001,
    0b00001,
    0b00001,
    0b11111,

    0b11111, // 6
    0b10000,
    0b10000,
    0b11111,
    0b10001,
    0b10001,
    0b10001,
    0b11111,

    0b11111, // 7
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,

    0b11111, // 8
    0b10001,
    0b10001,
    0b11111,
    0b10001,
    0b10001,
    0b10001,
    0b10001,

    0b11111, // 9
    0b10001,
    0b10001,
    0b10001,
    0b11111,
    0b00001,
    0b00001,
    0b11111,
};

static const std::vector<char16_t> glyph5x8_chars = {ZERO_TO_NINE};

FUNCDEF_GETGLYPH(5, 8);

/// 4x10 サイズの文字グリフ
static const uint8_t glyph4x10[] PROGMEM = {
    0b1111, // 0
    0b1001,
    0b1001,
    0b1001,
    0b1001,
    0b1001,
    0b1001,
    0b1001,
    0b1001,
    0b1111,

    0b0100, // 1
    0b0100,
    0b0100,
    0b0100,
    0b0100,
    0b0100,
    0b0100,
    0b0100,
    0b0100,
    0b0100,

    0b1111, // 2
    0b0001,
    0b0001,
    0b0001,
    0b0001,
    0b0111,
    0b1000,
    0b1000,
    0b1000,
    0b1111,
};

static const std::vector<char16_t> glyph4x10_chars = {u'0', u'1', u'2'};

FUNCDEF_GETGLYPH(4, 10);

/// 5x10 サイズの文字グリフ
static const uint8_t glyph5x10[] PROGMEM = {
    0b11111, // 0
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b11111,

    0b00100, // 1
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,
    0b00100,

    0b11111, // 2
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b01111,
    0b10000,
    0b10000,
    0b10000,
    0b11111,

    0b11111, // 3
    0b00001,
    0b00001,
    0b00001,
    0b01111,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b11111,

    0b00010, // 4
    0b10010,
    0b10010,
    0b10010,
    0b10010,
    0b10010,
    0b11111,
    0b00010,
    0b00010,
    0b00010,

    0b11111, // 5
    0b10000,
    0b10000,
    0b10000,
    0b11110,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b11111,

    0b11111, // 6
    0b10000,
    0b10000,
    0b10000,
    0b10000,
    0b11111,
    0b10001,
    0b10001,
    0b10001,
    0b11111,

    0b11111, // 7
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b00001,

    0b11111, // 8
    0b10001,
    0b10001,
    0b10001,
    0b11111,
    0b10001,
    0b10001,
    0b10001,
    0b10001,
    0b11111,

    0b11111, // 9
    0b10001,
    0b10001,
    0b10001,
    0b11111,
    0b00001,
    0b00001,
    0b00001,
    0b00001,
    0b11111,
};

static const std::vector<char16_t> glyph5x10_chars = {ZERO_TO_NINE};

FUNCDEF_GETGLYPH(5, 10);

/// 6x16 サイズの文字グリフ
static const uint8_t glyph6x16[] PROGMEM = {
    0b111111, // 0
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b100001,
    0b111111,

    0b001000, // 1
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,
    0b001000,

    0b111111, // 2
    0b000001,
    0b000001,
    0b000001,
    0b000001,
    0b000001,
    0b000001,
    0b000001,
    0b011111,
    0b100000,
    0b100000,
    0b100000,
    0b100000,
    0b100000,
    0b100000,
    0b111111,
};

static const std::vector<char16_t> glyph6x16_chars = {u'0', u'1', u'2'};

FUNCDEF_GETGLYPH(6, 16);

/// 7x16 サイズの文字グリフ
static const uint8_t glyph7x16[] PROGMEM = {
    0b1111111, // 0
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1111111,

    0b0001000, // 1
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,
    0b0001000,

    0b1111111, // 2
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0111111,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1111111,

    0b1111111, // 3
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0111111,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b1111111,

    0b0000010, // 4
    0b1000010,
    0b1000010,
    0b1000010,
    0b1000010,
    0b1000010,
    0b1000010,
    0b1000010,
    0b1000010,
    0b1000010,
    0b1111111,
    0b0000010,
    0b0000010,
    0b0000010,
    0b0000010,
    0b0000010,

    0b1111111, // 5
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1111110,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b1111111,

    0b1111111, // 6
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1000000,
    0b1111111,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1111111,

    0b1111111, // 7
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,

    0b1111111, // 8
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1111111,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1111111,

    0b1111111, // 9
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1000001,
    0b1111111,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b0000001,
    0b1111111,
};

static const std::vector<char16_t> glyph7x16_chars = {ZERO_TO_NINE};

FUNCDEF_GETGLYPH(7, 16);

namespace ConstGraphics {

//! 「ESP8266Clock」
const std::array<uint32_t, 16> welcome PROGMEM = {
    0b11110011001110011101110111011100,
    0b10000100101001010100010100010000,
    0b10000100001001010100010100010000,
    0b11110011001110011101110111011100,
    0b10000000101000010101000101010100,
    0b10000100101000010101000101010100,
    0b11110011001000011101110111011100,
    0b00000000000000000000000000000000,
    0b00000000000110010000000000001000,
    0b00000000001001010000000000001000,
    0b00000000001000010001100011001000,
    0b00000000001000010010010100101001,
    0b00000000001000010010010100001010,
    0b00000000001000010010010100001100,
    0b00000000001001010010010100101010,
    0b00000000000110001001100011001001,
};

//! 「同期中」
const std::array<uint32_t, 8> douki_chu PROGMEM = {
    0b11111111001010111100001000000000,
    0b10000001011111100100001000000000,
    0b10111101001010111101111111000000,
    0b10000001001110100101001001000000,
    0b10111101001010111101001001000000,
    0b10100101011111100101111111000000,
    0b10111101001010100100001000000000,
    0b10000011010001101100001000000000,
};

//! 「設定して下さい」
const std::array<uint32_t, 16> plz_setting PROGMEM = {
    0b01000100000100000100000000000000,
    0b11101010111111100100000000011111,
    0b00001010100000101000000011100100,
    0b11100000011111001000000000001000,
    0b00001110000100001000001000010000,
    0b11101010000111001000001000010000,
    0b10100100010100000100010000001000,
    0b11101010101111100011100000000110,
    0b00000000000000000000000000000000,
    0b11111110000100001000000000000000,
    0b00010000111111001000100000000000,
    0b00011000000100010000100000000000,
    0b00010100011010010000010000000000,
    0b00010010100110010000010000000000,
    0b00010000010000001010000000000000,
    0b00010000001110000100000000000000,
};

//! 「Wi-Fi 接続不可」
const std::array<uint32_t, 16> con_fail PROGMEM = {
    0b10001000000011100000000000000000,
    0b10001010000010001000000000000000,
    0b10001000111010000000000000000000,
    0b10101010000011101000000000000000,
    0b10101010000010001000000000000000,
    0b01010010000010001000000000000000,
    0b00000000000000000000000000000000,
    0b01000100001000010001111110111111,
    0b01011111010101111100010000000010,
    0b11101010001000010000010000000010,
    0b01011111010101111100111000111010,
    0b01100100011100000001010100101010,
    0b11011111001001111101010010111010,
    0b01001010011101000100010000000010,
    0b01000100011100101000010000000010,
    0b11011011001001101100010000000110,
};

} // namespace ConstGraphics

#undef ZERO_TO_NINE
#undef FUNCDEF_GETGLYPH
